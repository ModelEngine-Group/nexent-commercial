name: Deploy Nexent Commercial

on:
  workflow_dispatch:
    inputs:
      deployment_mode:
        description: '部署模式: development or production'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production
      runner_label_json:
        description: 'JSON 格式的 runner 标签数组'
        required: true
        default: '["self-hosted", "MacOS", "X64"]'

jobs:
  checkout:
    runs-on: ${{ fromJson(inputs.runner_label_json) }}
    outputs:
      sha: ${{ steps.get-sha.outputs.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get commit SHA
        id: get-sha
        run: echo "sha=${{ github.sha }}" >> "$GITHUB_OUTPUT"

  prepare:
    runs-on: ${{ fromJson(inputs.runner_label_json) }}
    needs: checkout
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Copy project to $HOME/nexent-commercial
        run: |
          rm -rf $HOME/nexent-commercial
          mkdir -p $HOME/nexent-commercial
          cp -r $GITHUB_WORKSPACE/* $HOME/nexent-commercial/
      - name: Clean up old files and images
        run: |
          docker rm -f nexent || true
          docker rm -f nexent-data-process || true
          docker rm -f nexent-web || true
          docker rmi nexent/nexent-base-commercial || true
          docker rmi nexent/nexent-commercial || true
          docker rmi nexent/nexent-web-commercial || true
          docker rmi nexent/nexent-data-process-commercial || true
          docker builder prune -f

  build-base:
    runs-on: ${{ fromJson(inputs.runner_label_json) }}
    needs: [checkout, cleanup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build base image
        run: docker build --progress=plain -t nexent/nexent-base-commercial -f make/base/Dockerfile .

  build-main:
    runs-on: ${{ fromJson(inputs.runner_label_json) }}
    needs: build-base
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build main application image
        run: docker build --progress=plain -t nexent/nexent-commercial -f make/main/Dockerfile .

  build-data-process:
    runs-on: ${{ fromJson(inputs.runner_label_json) }}
    needs: [checkout, cleanup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Check if model is cached locally
        id: check-model
        run: |
          if [ -f ./model-assets/clip-vit-base-patch32/config.json ]; then
            echo "cache-hit=true" >> "$GITHUB_OUTPUT"
          else
            echo "cache-hit=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Clone model if not cached
        if: steps.check-model.outputs.cache-hit == 'false'
        run: |
          mkdir -p ./model-assets
          GIT_LFS_SKIP_SMUDGE=1 git clone https://www.modelscope.cn/openai-mirror/clip-vit-base-patch32.git ./model-assets/clip-vit-base-patch32
          cd ./model-assets/clip-vit-base-patch32
          GIT_TRACE=1 GIT_CURL_VERBOSE=1 GIT_LFS_LOG=debug git lfs pull
          rm -rf .git flax_model.msgpack tf_model.h5
      - name: Build data process image
        run: docker build --progress=plain -t nexent/nexent-data-process-commercial -f make/data_process/Dockerfile .

  build-web:
    runs-on: ${{ fromJson(inputs.runner_label_json) }}
    needs: [checkout, cleanup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build web frontend image
        run: docker build --progress=plain -t nexent/nexent-web-commercial -f make/web/Dockerfile .

  deploy:
    runs-on: ${{ fromJson(inputs.runner_label_json) }}
    needs: [cleanup, build-base, build-main, build-data-process, build-web]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Ensure deploy.sh is executable
        run: chmod +x $HOME/nexent-commercial/docker/deploy.sh
      - name: Deploy with deploy.sh
        env:
          DEPLOYMENT_MODE: ${{ github.event.inputs.deployment_mode }}
        run: |
          cd $HOME/nexent-commercial/docker
          cp .env.example .env
          if [ "$DEPLOYMENT_MODE" = "production" ]; then
            echo 2 | ./deploy.sh
          else
            echo 1 | ./deploy.sh
          fi